# SPDX-License-Identifier: BSD-3-Clause
---
- hosts: all
  vars:
    interface: statebr
    profile: "{{ interface }}"
    network_provider: nm
  tasks:
    - debug:
        msg: Inside states tests
    - include_tasks: tasks/show_interfaces.yml
    - include_tasks: tasks/assert_device_absent.yml

    # create test profile
    - include_role:
        name: linux-system-roles.network
      vars:
        network_connections:
          - name: statebr
            state: up
            type: bridge
            ip:
              dhcp4: false
              auto6: false
      tags:
        - 'tests::net::bridge'
    - include_tasks: tasks/assert_device_present.yml
    - include_tasks: tasks/assert_profile_present.yml

    # test case (remove profile but keep it up)
    # I can remove a profile but keep the configuration active.
    - include_role:
        name: linux-system-roles.network
      vars:
        network_connections:
          - name: statebr
            persistent_state: absent
    - include_tasks: tasks/assert_device_present.yml
    - include_tasks: tasks/assert_profile_absent.yml

    # test case
    # I can set a profile down that is up and absent.
    - name: Set down
      include_role:
        name: linux-system-roles.network
      vars:
        network_connections:
          - name: statebr
            state: down
    - include_tasks: tasks/assert_device_absent.yml
    - include_tasks: tasks/assert_profile_absent.yml

    # test case (downing a non existent profile)
    # I can set down and remove a non existent profile
    # This will be rescued until issue 188 is fixed
    - name: Verify that the play fails with the expected error message
      block:
        - name: Set down non existent profile
          include_role:
            name: linux-system-roles.network
          vars:
            network_connections:
              - name: non_existent
                state: down
                persistent_state: absent

        - name: 'UNREACH'
          set_fact:
            __network_test_failed: false

      rescue:
        - name: Role has failed when it should have
          set_fact:
            __network_test_failed: true

      always:
        - assert:
            that: __network_test_failed
            fail_msg: "The role did not fail when it should have"

  pre_tasks:
    - name: Save host state
      import_tasks: tasks/save_state.yml

  post_tasks:
    - name: Remove test bridge in case it is still lingering
      command: 'ip link delete "{{ interface }}"'
      tags:
        - 'tests::cleanup'
        - 'tests::net::bridge::cleanup'
      ignore_errors: yes

    - name: Restore host state
      import_tasks: tasks/restore_state.yml
